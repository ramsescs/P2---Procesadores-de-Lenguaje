%%-- Operaciones aritméticas y comparación
%%---------------------------------------------
%%---------------------------------------------
%%
REAL re1, re2
BOOLEANO bo
CARACTER ca = 'h' % variable de tipo carácter, y su literal
re1 =5 * 3 - 80/10 % esta expresion debe resultar 7
re2 =10 / 5 * re1 % esta expresion debe resultar 4
bo =5<3 % comparación, debe resultar cierto
% si un número es positivo
REAL num
BOOLEANO espos
SI num >= 0
ENTONCES
Espositivo = CIERTO
SINO
Espositivo = FALSO
FINSI
%cálculo del máximo
REAL a,b,c,max
a =1
b =2
c =3
SI a>=b AND a>=c
ENTONCES % a es el máximo
max =a
 SINO % el máximo es b o c
 SI b>=a AND b>=c
 ENTONCES % b es el máximo
max =b
 SINO % c es el máximo, por descarte
 max =c
FINSI
FINSI
% hasta aqui la gramatica lo reconoce

%%-- Declaracion de variables y tipos REGISTRO
%%---------------------------------------------
%%---------------------------------------------
%%
REAL re1
ENTERO en2 = 6 % con asignación de valor
BOOLEANO bo3 = 5<3 % se asigna el resultado de una expresión
CARACTER ca4 = 'h' % variable de tipo carácter, y su literal
REGISTRO VECTOR2D {REAL x1, x2;}
REGISTRO BOLA {VECTOR2D centro; REAL radio;} %definición tipo compuesto
BOLA punto1 % declaración variable struct (no permite asignación al
VECTOR CARACTER cadena[10]
% mismo tiempo que la declaracion
REGISTRO PALABRA {VECTOR CARACTER cadena[10];}
REGISTRO PERSONA {PALABRA nombre, apellido1, apellido2;
ENTERO edad;}
PERSONA alumno
%%% Expresiones
5 + 6 % operacion
re1 = 3.7 % asignación simple
bo3 = en2 < 7 AND 5.46+7*en2 > 4 % asignación compleja
punto1.centro.x1 = 0.0 % campo de variable resgistro anidada
punto1.centro.x2 = 0.0 % campo de variable resgistro anidada
punto1.radio = 10.0 % campo de variable resgistro
alumno.nombre.cadena[0]='A'
alumno.nombre.cadena[1]='l'
alumno.nombre.cadena[2]='b'
alumno.nombre.cadena[3]='e'
alumno.nombre.cadena[4]='r'
alumno.nombre.cadena[5]='t'
alumno.nombre.cadena[6]='o'
alumno.nombre.cadena[7]=0
alumno.apellido1.cadena[0]='G'
alumno.apellido1.cadena[1]='a'
alumno.apellido1.cadena[2]='r'
alumno.apellido1.cadena[3]='c'
alumno.apellido1.cadena[4]='í'
alumno.apellido1.cadena[5]='a'
alumno.apellido1.cadena[6]=0
alumno.apellido2.cadena[0]='S'
alumno.apellido2.cadena[1]='a'
alumno.apellido2.cadena[2]='n'
alumno.apellido2.cadena[3]='z'
alumno.apellido2.cadena[4]=0
alumno.edad=19

%%% Sentencia de control de flujo bucle condicional

SI re2==3 OR bo1 AND bo2 %% condición
ENTONCES %% cuerpo cuando la condición es verdadera
 re2 = re2-3
SINO %% cuerpo cuando la condición es falsa
 re2 = 10-re1*re1
FINSI %% fin de la sentencia

BOOLEANO seguir= cierto
MIENTRAS seguir AND punto1.radio>0 % bucle condicional
    SI punto1.centro.x1 <0 AND punto1.centro.x2 <0 % cuerpo si condición verdadera
    ENTONCES
        seguir = false
    SINO % cuerpo cuando la condición es falsa
        Seguir = cierto
    FINSI % fin de condicional
    punto1.radio = punto1.radio/2.0
    punto1.centro.x1 = punto1.centro.x1 - 1.0
    punto1.centro.x2 = punto1.centro.x2 - 1
FINMIENTRAS % fin de bucle MIENTRAS




FUNCION cuadrado(REAL a): REAL{
 DEVOLVER a * a}

%%% Sobrecarga de funciones
FUNCION cuadrado( ENTERO e ): ENTERO{
 DEVOLVER e * e}

%%% Funcion de dos argumentos
FUNCION potencia( REAl a, ENTERO e ): REAL{
 REAL r =1
 ENTERO i =1
 MIENTRAS i<e
    r = r*a
    i = i+1
 FINMIENTRAS
 DEVOLVER r}


ENTERO en2 = 6 % con asignación de valor
%%% Expresiones
5 + 6 % operacion
re1 = 3.7 % asignación simple
re1 = 3.7 + cuadrado(re1) % usando llamada a función
re2 = potencia(re1,en2)
%%% Sentencia condicional de control de flujo
SI en2==3 OR bo3 AND re1 % condición
ENTONCES % cuerpo cuando la condición es verdadera
 en2 = en2+3
SINO % cuerpo cuando la condición es falsa, llamada recursiva
 re1 = cuadrado( cuadrado (en2) )
FINSI % fin de la sentencia